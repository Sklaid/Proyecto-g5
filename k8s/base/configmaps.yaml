---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: observability
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      batch:
        timeout: 10s
        send_batch_size: 1024
      memory_limiter:
        check_interval: 1s
        limit_mib: 512

    exporters:
      prometheus:
        endpoint: 0.0.0.0:8889
      otlp/tempo:
        endpoint: tempo:4317
        tls:
          insecure: true

    service:
      telemetry:
        metrics:
          level: detailed
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [prometheus]
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlp/tempo]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'aiops-platform'
        environment: 'production'

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector:8889']

      - job_name: 'demo-app'
        static_configs:
          - targets: ['demo-app:3000']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
  namespace: observability
data:
  tempo.yaml: |
    server:
      http_listen_port: 3200

    distributor:
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318

    ingester:
      trace_idle_period: 10s
      max_block_bytes: 1_000_000
      max_block_duration: 5m

    compactor:
      compaction:
        block_retention: 168h  # 7 days

    storage:
      trace:
        backend: local
        local:
          path: /var/tempo/traces
        wal:
          path: /var/tempo/wal
        pool:
          max_workers: 100
          queue_depth: 10000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: anomaly-detector-config
  namespace: observability
data:
  config.yaml: |
    prometheus:
      url: http://prometheus:9090
      check_interval: 300  # 5 minutes
    
    metrics:
      - name: http_request_duration_p95
        query: histogram_quantile(0.95, rate(http_server_request_duration_seconds_bucket[5m]))
        threshold: 0.3
      - name: http_request_rate
        query: rate(http_server_requests_total[5m])
        threshold: 0.5
      - name: error_rate
        query: rate(http_server_requests_total{status=~"5.."}[5m])
        threshold: 0.2
    
    alerting:
      webhook_url: http://grafana:3000/api/alerts
